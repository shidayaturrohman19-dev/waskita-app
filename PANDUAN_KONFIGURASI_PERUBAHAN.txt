================================================================================
                    PANDUAN KONFIGURASI PERUBAHAN PROYEK WASKITA
================================================================================

TANGGAL PERUBAHAN: [Tanggal saat ini]
TUJUAN: Mengganti data numerik spesifik dan contoh yang ambigu dengan placeholder 
        dinamis untuk menghindari kesalahpahaman dan meningkatkan keamanan.

================================================================================
                              RINGKASAN PERUBAHAN
================================================================================

Total File yang Dimodifikasi: 8 file
- docs/API_DOCUMENTATION.md
- docs/LAPORAN_AUDIT_KEAMANAN.md  
- docs/SECURITY_OTP_GUIDE.md
- .env.example
- config.py
- docker-compose.yml
- setup_postgresql.py

================================================================================
                           DETAIL PERUBAHAN PER FILE
================================================================================

1. FILE: docs/API_DOCUMENTATION.md
   ────────────────────────────────────────────────────────────────────────────
   PERUBAHAN:
   - Login API: username/password spesifik → [username]/[password]
   - User ID: angka spesifik → [user_id]
   - Role: nilai spesifik → [role]
   - Timestamp: waktu spesifik → [timestamp]
   - Registrasi OTP: data spesifik → [new_username], [user@example.com]
   - Dashboard Stats: angka spesifik → [Dinamis], [%]
   - Activity Logs: data spesifik → [id], [Action Type], [status]
   - Upload File: detail spesifik → [Dataset Name], [upload_id], [count]
   - Pagination: angka spesifik → [X], [page], [per_page], [total]
   - Bulk Delete: ID spesifik → "[1, 2, 3, 4, 5]"

2. FILE: docs/LAPORAN_AUDIT_KEAMANAN.md
   ────────────────────────────────────────────────────────────────────────────
   PERUBAHAN:
   - Rate Limiting: "500/day, 200/hour, 50/minute" → "[Konfigurasi]/day, [Konfigurasi]/hour, [Konfigurasi]/minute"
   - Contoh kode: "50 per minute", "200 per hour", "500 per day" → "[X]"

3. FILE: docs/SECURITY_OTP_GUIDE.md
   ────────────────────────────────────────────────────────────────────────────
   PERUBAHAN:
   - Kredensial default: "admin", "database", "test" → [username], [password]
   - Database credentials: spesifik → [db_user], [db_password]
   - Password length: angka spesifik → [X]
   - OTP config: "6", "10", "3" → [X]
   - Konfigurasi: OTP_LENGTH=6 → OTP_LENGTH=[X]

4. FILE: .env.example
   ────────────────────────────────────────────────────────────────────────────
   PERUBAHAN:
   - DATABASE_URL: postgresql://username:password@localhost:5432/waskita_db 
     → postgresql://[username]:[password]@[host]:[port]/[database_name]
   - SECRET_KEY: your-secret-key-here → [your-secret-key]
   - FLASK_DEBUG: False → [True/False]
   - FLASK_ENV: production → [development/production]
   - UPLOAD_FOLDER: uploads → [folder_path]
   - MAX_CONTENT_LENGTH: 16777216 → [bytes]
   - MAIL_SERVER: smtp.gmail.com → [smtp_server]
   - MAIL_PORT: 587 → [port]
   - MAIL_USERNAME: your-email@gmail.com → [email_address]
   - ADMIN_EMAIL: admin@waskita.com → [admin_email]
   - OTP_LENGTH: 6 → [X]
   - OTP_EXPIRY_MINUTES: 30 → [X]
   - MAX_OTP_ATTEMPTS: 3 → [X]
   - LOCKOUT_DURATION_MINUTES: 15 → [X]
   - BASE_URL: http://localhost:5000 → [http://host:port]
   - EMAIL_RETRY_ATTEMPTS: 3 → [X]
   - EMAIL_RETRY_DELAY_SECONDS: 5 → [X]
   - CLEANUP_EXPIRED_REQUESTS_HOURS: 24 → [X]
   - KEEP_COMPLETED_REQUESTS_DAYS: 7 → [X]

5. FILE: config.py
   ────────────────────────────────────────────────────────────────────────────
   PERUBAHAN:
   - MAX_CONTENT_LENGTH: 16 * 1024 * 1024 → [X] * 1024 * 1024
   - Comment: # 16MB max file size → # [X]MB max file size
   - PERMANENT_SESSION_LIFETIME: timedelta(hours=24) → timedelta(hours=[X])
   - POSTS_PER_PAGE: 25 → [X]
   - WTF_CSRF_TIME_LIMIT: '3600' → '[X]'

6. FILE: docker-compose.yml
   ────────────────────────────────────────────────────────────────────────────
   PERUBAHAN:
   - image: postgres:15 → postgres:[version]
   - image: redis:7-alpine → redis:[version]-alpine
   - container_name: waskita_db → [container_name]
   - container_name: waskita_redis → [container_name]
   - container_name: waskita_app → [container_name]
   - container_name: waskita_nginx → [container_name]
   - POSTGRES_DB: waskita_db → [database_name]
   - POSTGRES_USER: waskita_user → [username]
   - POSTGRES_PASSWORD: waskita_password → [password]
   - DB_PORT: 5432 → [port]
   - REDIS_PORT: 6379 → [port]
   - WEB_PORT: 5000 → [port]
   - NGINX_HTTP_PORT: 80 → [port]
   - NGINX_HTTPS_PORT: 443 → [port]
   - SECRET_KEY: waskita-docker-secret-key-2024-production-change-this → [your-secret-key-change-this]
   - REDIS_URL: redis://redis:6379/0 → redis://redis:[port]/[db_number]
   - Health check intervals: 30s, 10s, 3, 40s → [X]s, [X]s, [X], [X]s

7. FILE: setup_postgresql.py
   ────────────────────────────────────────────────────────────────────────────
   PERUBAHAN:
   - Default host: localhost → [host]
   - Default port: 5432 → [port]
   - Default admin user: postgres → [admin_user]
   - Default database: waskita_dev → [database_name]
   - Default test database: waskita_test → [test_database_name]
   - Default db user: waskita_user → [db_username]
   - Default db password: waskita_password → [db_password]
   - Admin username: admin → [admin_username]
   - Admin email: admin@waskita.com → [admin@example.com]
   - Admin password: admin123 → [admin_password]
   - Admin fullname: Administrator → [Administrator Name]

================================================================================
                              CARA MENGGUNAKAN
================================================================================

UNTUK DEVELOPMENT:
1. Copy .env.example ke .env
2. Ganti semua placeholder [X] dengan nilai yang sesuai
3. Ganti [username], [password], [host], [port] dengan konfigurasi database Anda
4. Ganti [your-secret-key] dengan secret key yang aman
5. Ganti [email_address] dengan email SMTP yang valid
6. Sesuaikan nilai OTP dan timeout sesuai kebutuhan

UNTUK PRODUCTION:
1. Pastikan semua placeholder diganti dengan nilai production yang aman
2. Gunakan password yang kuat dan unik
3. Aktifkan HTTPS dan konfigurasi SSL yang proper
4. Review semua konfigurasi keamanan
5. Jangan gunakan nilai default untuk production

CONTOH KONFIGURASI .env:
DATABASE_URL=postgresql://myuser:mypassword@localhost:5432/waskita_prod
SECRET_KEY=your-very-secure-secret-key-here
FLASK_ENV=production
FLASK_DEBUG=False
MAX_CONTENT_LENGTH=16777216
MAIL_SERVER=smtp.gmail.com
MAIL_PORT=587
OTP_LENGTH=6
OTP_EXPIRY_MINUTES=10

================================================================================
                                 KEAMANAN
================================================================================

PENTING - JANGAN PERNAH:
- Commit file .env ke repository
- Gunakan password default di production
- Expose secret key atau credentials
- Gunakan nilai placeholder sebagai konfigurasi aktual

SELALU:
- Generate secret key yang unik dan aman
- Gunakan environment variables untuk konfigurasi sensitif
- Review konfigurasi sebelum deploy ke production
- Backup konfigurasi dengan aman

================================================================================
                              TROUBLESHOOTING
================================================================================

JIKA APLIKASI TIDAK JALAN:
1. Periksa apakah semua placeholder sudah diganti
2. Pastikan database connection string benar
3. Verifikasi email SMTP configuration
4. Check log aplikasi untuk error spesifik

JIKA DATABASE ERROR:
1. Pastikan PostgreSQL service berjalan
2. Verifikasi username/password database
3. Check apakah database sudah dibuat
4. Run setup_postgresql.py jika perlu

JIKA EMAIL OTP TIDAK TERKIRIM:
1. Verifikasi SMTP credentials
2. Check firewall/network settings
3. Pastikan Gmail App Password sudah benar (jika pakai Gmail)
4. Test email configuration

================================================================================
                                CHANGELOG
================================================================================

[Tanggal] - Penggantian Data Ambigu dengan Placeholder
- Mengganti semua nilai numerik spesifik dengan placeholder dinamis
- Update dokumentasi API dengan contoh yang tidak ambigu
- Standardisasi format konfigurasi di semua file
- Peningkatan keamanan dengan menghilangkan hardcoded values
- Dokumentasi lengkap untuk panduan konfigurasi

================================================================================
                                 KONTAK
================================================================================

Jika ada pertanyaan atau masalah terkait konfigurasi ini, silakan:
1. Check dokumentasi di folder docs/
2. Review file README.md
3. Konsultasi dengan tim development

================================================================================
                              END OF DOCUMENT
================================================================================